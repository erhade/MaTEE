
==============================================================================
Fast Models 11.20 Base Rev C FVP Release Notes
==============================================================================

------------
Introduction
------------

The Base Rev C platform is an evolution of the Base platform, enhanced
to support exploration of system level virtualization. It is an
Architecture Envelope Model (AEM) which incorporates two AEM clusters,
each of which can be configured with up to four cores. It supports
Armv8 architecture versions through v8.9 and defaults to a configuration
that is compatible with Armv8.0. The model also supports Armv9 features
mentioned below:
 - Realm Management Extension (RME) at Beta quality
 - Scalable Matrix Extension (SME) at Beta quality
 - Scalable Matrix Extension 2 (SME2) at Beta quality
 - Branch Record Buffer Extension (BRBE) at EAC quality
 - Scalable Vector Extension 2 (SVE2) at EAC quality
 - Transactional Memory Extension (TME) at EAC quality

It is freely available and does not require a license from Arm in order
to run the model.

------------
Installation
------------

For installation instructions, see the chapter "Installing Fast Models" in the
Fast Models User Guide:
https://developer.arm.com/documentation/100965/latest/Installing-Fast-Models/Installation

-----------------
What is supported
-----------------

Fast Models FVPs support the following host architectures and operating systems:

For x86 hosts:
* RedHat Enterprise Linux 7
* RedHat Enterprise Linux 8
* Ubuntu 18.04 LTS
* Ubuntu 20.04 LTS
* Windows 10

For aarch64 hosts:
* RedHat Enterprise Linux 8
* Ubuntu 20.04 LTS

When running on Linux, use machines with at least 2GB RAM, and preferably at
least 4GB for best performance.

When running Microsoft Windows 10, use machines with at least 2GB RAM, and
preferably at least 4GB for best performance. To use audio a 2GHz, or faster,
Intel Core2Duo, or similar performing, processor is recommended.

Fast Models Portfolio does not contain the Microsoft Visual Studio
runtime libraries.

The following Visual Studio components are required:
    - Visual C++ ATL for x86 and x64
    - Visual C++ MFC for x86 and x64

FVPs shipped with this package are built with Visual Studio 2019 and GCC 9.3.0.


System Level Virtualization
---------------------------

* Additions

This package contains the following additions to the Base Platform
specification:

A PCI-E config region at 0x0040000000..0x004fffffff
A PCI-E memory region at 0x0050000000..0x005fffffff
A PCI-E memory region at 0x4000000000..0x7fffffffff
An SMMUv3AEM with a control region at 0x002B500000..0x002B5FFFFF

SMMU Combined Interrupt NS is wired to SPI 71
SMMU Combined Interrupt S is wired to SPI 72

PCI INTA is wired to SPI 168
PCI INTB is wired to SPI 169
PCI INTC is wired to SPI 170
PCI INTC is wired to SPI 171
PCI System Error is wired to SPI 175

The SMMUv3 is placed such that accesses to memory by PCI devices acting as bus
masters are affected by it.

The PCI-E config region implements ECAM.

* SMMUv3AEM

This is an architectural model implementing the SMMUv3.0 and
SMMUv3.1 architectures which are for I/O virtualization of
devices.

Limitations:
    - No RAS
    - The PMU has limited functionality. Only a subset of the
      architecturally mandatory events are supported (as indicated
      by the SMMU_PMCG_CEID0 fields).  The PMU is only intended for
      demonstration purposes and for driver development.

* Legacy PCI Interrupts

Each PCI device is hardwired to use INTA. That is 1 in the
interrupt_pin register.  This is mandated by the PCI Spec for single
function devices.

The mapping of the interrupts in the bridge follows the prescription
from section 2.2.6 of the PCI Local Bus 3 specification. With

IntA = 0, IntB = 1, IntC = 2, IntD = 3:

BridgeInterrupt = (Device + DeviceInterrupt) % 4


* MSI-X

The model optionally implements MSI-X depending on if a parameter is set. If
this parameter is set then an MSI-X capability is advertised as a PCI
Capability.

Note: The Virtio specification is not fully compliant with the PCI
specification and the virtio block device cannot be used in a 'pure polling'
mode where MSI-X is always masked and only polling the Pending Bit Array is
used.


* Composition

The PCI Subsystem is composed of the following model components:

pci.pvbus2pci: This is the bridge from the Programmer's View bus to
the PCI bus.

pci.pcidevice<N>: This is a wrapper around the underlying virtio block
device. There are two block devices 0 and 1 in the system.

pci.pcivirtioblockdevice<N>: These are the instances of the virtio
block device component.

Interesting options are:

pci.pvbus2pci.diagnostics=0x0    # (int) default = '0x0'  : Diagnostics level : [0x0..0x4]
pci.pcidevice<N>.diagnostics=0x0 # (int) default = '0x0'  : Diagnostics level : [0x0..0x4]

In this release, bus numbers are automatically assigned to devices.
Devices can be hidden from the subsystem using the parameter:
pci.pcidevice<N>.is_hidden=1

There are two PVBusLoggers in the pvbus2pci component. One in front of the
Configuration space and one in front of the Device space:

FVP_Base_AEMv8A_AEMv8A-PCI.pci.pvbus2pci.devicelogger
FVP_Base_AEMv8A_AEMv8A-PCI.pci.pvbus2pci.cfglogger

There is one PVBusLogger in the pcidevice component. This will report on DMA
accesses by the PCI device:

FVP_Base_AEMv8A_AEMv8A-PCI.pci.pcidevice0.dmalogger

There is a PVBusLogger downstream of the SMMU. This will report on the transactions
after they have been transformed by the SMMU:

FVP_Base_AEMv8A_AEMv8A_PCI.pci.smmulogger

For example, you can see all accesses to device space by adding the
following options to the command line:

--plugin GenericTrace.so
-C TRACE.GenericTrace.trace-sources="FVP_Base_AEMv8A_AEMv8A-PCI.pci.pvbus2pci.devicelogger.*"

* Known Limitations

- In a real system use of the stall model would violate PCI timing
  constraints and so should not be used.

* Known Bugs

- Arbitrary sized but naturally aligned accesses to virtio registers via PCI
  are not implemented, the model will print a message if such an access is
  performed.

- Debug reads and writes to the virtio registers are not implemented.

--------------------
Feedback and support
--------------------

Your feedback is important to us, and you are welcome to send us defect reports and
suggestions for improvement on any aspect of the product.

Please visit https://developer.arm.com/support and open a case with feedback or
support issues, using your work or academic email address if possible. Where
appropriate, please provide the following information:
- The product name.
- The product revision or version.
- An explanation with as much information as you can provide. Include symptoms and
  diagnostic procedures if appropriate, and if possible provide an example
  virtual platform that demonstrates the issue you are reporting.

--------------------------------------
Changes in Fast Models 11.20
--------------------------------------

* The AEMvA model now includes:
  * support for Arm v8.9-A features except Guarded Call Stack,
    128-bit page table descriptors and updates to PMU registers.
  * support for Arm v9.4-A features except RME without Secure EL2

* Based on guidance from our trade compliance team, the crypto plugin (crypto.dll
  and crypto.so) has been removed from the main Fast Models package and placed
  within the "MMEncrypt" (mass-market encryption) add-on package.
  This can be downloaded from the Product Download Hub if you have a valid
  entitlement:
  https://developer.arm.com/downloads

-----------
Limitations
-----------

* RASv2 support for AArch32 is not validated with the Architecture Compliance Kit.

Date:  2022/12/01 18:04:14 GMT
Build: 11.20:15

Confidential

==============================================================================
END
==============================================================================
